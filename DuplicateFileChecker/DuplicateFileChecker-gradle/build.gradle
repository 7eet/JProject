subprojects {
	ext.junitPlatformVersion = '1.5.1'
	ext.junitJupiterVersion  = '5.5.1'	
    
	afterEvaluate {
    	
	        repositories {
			jcenter()
        	}
        
		dependencies {
  
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    			implementation 'com.google.guava:guava:27.0.1-jre'

    
    // JUnit Jupiter API and TestEngine implementation
  			testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
  			testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

  			testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

	// for logging used apache log4j
			compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.1'
  			compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'
		}

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'org.junit.jupiter.api',
                    '--add-reads', "$moduleName=org.junit.jupiter.api",
                   
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'ALL-MODULE-PATH',
                    '--add-reads', "$moduleName=org.junit.jupiter.api",
                  
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
        
        
    }
}
